module Test where

    { id = \ x -> x
    ; const = \ x y -> x

    ; Zero = \   f x -> x
    ; Succ = \ n f x -> f (n f x)

    ; one   = Succ Zero
    ; two   = Succ one
    ; three = Succ two

    ; add = \ m n -> m Succ n
    ; mul = \ m n -> m (add n) Zero
    ; exp = \ m n -> n m

    ; pred = \ n -> n (\ m -> m (Just Zero) (\ n -> Just (Succ n))) Nothing

    ; zerop = \ n -> n (const False) True

    ; fac = \ n ->
            cat n
                one
                (\ m -> mul (Succ m) (fac m))

    ; cat = pred

    ; Nothing = \   x f -> x
    ; Just    = \ j x f -> f j

    ; fromJust = \ m -> m (fromJust m) id

    ; pair = \ x y f -> f x y
    ; fst  = \ p -> p  const
    ; snd  = \ p -> p (const id)

    ; cons = \ x y z f -> f x y
    ; nil  = \     z f -> z
    ; head = \ p -> p Nothing (\ x y -> (Just x))
    ; tail = \ p -> p Nothing (\ x y -> (Just y))

    ; True  = \ x y -> x
    ; False = \ x y -> y

    ; forever = \ f -> bind f (forever f)

    ; main' = fac (mul two three)
    ; main  = forever (getChar putChar)

    }
