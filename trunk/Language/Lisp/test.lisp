(define list (lambda xs xs))
(list list list)

((lambda (list)
   ((lambda (let1)
      (let1 comment (macro (lambda (c b)
                             b))
            (let1 fix (lambda (f)
                        (let1 ff (lambda (x)
                                   (f (x x)))
                              (ff ff)))
                  (let1 if (macro (lambda (i t e)
                                    (list 'if-function i (list 'lambda () t) (list 'lambda () e))))
                        (let1 map (fix (lambda (mapy)
                                         (lambda (f xs)
                                           (if xs
                                               (cons (f (car xs)) (mapy f (cdr xs)))
                                               ()))))
                              (let1 let (macro (lambda (bindings body)
                                                 (cons
                                                  (list 'lambda (map car bindings) body)
                                                  (map (lambda (x) (car (cdr x))) bindings))))
                                    (let ((nil ())
                                          (true 'true))
                                      'true)))))))
    (macro (lambda (variable value body)
             (list
              (list 'lambda (list variable) body)
              value)))))
 (lambda xs xs))
